name: Deploy to Remote Server via Webhook

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build-and-push-docker-image:
    name: Build Docker image and push to Docker Hub
    runs-on: ubuntu-latest
    # 이 잡의 출력을 다른 잡에서 사용할 수 있도록 설정
    outputs:
      image_name: ${{ steps.build_image.outputs.image }}
      image_tag_latest: latest
      image_tag_sha: ${{ github.sha }}

    steps:
      - name: Checkout code
        # GitHub 리포지토리의 코드를 워크플로우 실행 환경으로 가져옴
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # Docker 이미지를 더 효율적으로 빌드하고 멀티-플랫폼 빌드를 지원하기 위해 Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        # Docker Hub에 로그인하여 이미지를 푸시할 수 있도록 함
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # GitHub Secrets에서 Docker Hub 사용자 이름 가져오기
          password: ${{ secrets.DOCKERHUB_TOKEN }} # GitHub Secrets에서 Docker Hub 액세스 토큰 가져오기

      - name: Build and push Docker image
        id: build_image # 이 스텝의 출력을 참조하기 위해 id 설정
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 있는 현재 디렉토리
          file: ./Dockerfile # 사용할 Dockerfile 경로
          push: true # 빌드 후 이미지를 Docker Hub에 푸시
          tags: | # 이미지에 적용할 태그들
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}:${{ github.sha }}
          # 빌드된 이미지 이름을 output으로 설정
          outputs: type=image,name=${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPONAME }}
          # GitHub Actions 캐시를 사용하여 빌드 속도 향상
          cache-from: type=gha
          cache-to: type=gha,mode=max

  trigger-remote-deployment:
    name: Trigger remote server deployment
    needs: build-and-push-docker-image # \'build-and-push-docker-image\' 잡이 성공해야 실행
    runs-on: ubuntu-latest

    steps:
      - name: Send webhook to remote server
        env:
          # GitHub Secrets 및 이전 잡의 outputs에서 환경 변수 설정
          WEBHOOK_URL: ${{ secrets.REMOTE_WEBHOOK_URL }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET_TOKEN }}
          IMAGE_NAME: ${{ needs.build-and-push-docker-image.outputs.image_name }}
          # 배포 시 사용할 태그 (latest 또는 sha). 여기서는 latest를 사용.
          IMAGE_TAG: ${{ needs.build-and-push-docker-image.outputs.image_tag_latest }}
        run: |
          echo "Sending webhook to: $WEBHOOK_URL"
          echo "Image to deploy: $IMAGE_NAME:$IMAGE_TAG"

          # 웹훅으로 전송할 JSON 페이로드 생성
          JSON_PAYLOAD=$(cat <<EOF
          {
            "image_name": "$IMAGE_NAME",
            "image_tag": "$IMAGE_TAG"
          }
          EOF
          )

          echo "Payload: $JSON_PAYLOAD"

          # curl을 사용하여 웹훅 URL로 POST 요청 전송
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Secret: "$WEBHOOK_SECRET"" \
            -d "$JSON_PAYLOAD" \
            --fail-with-body # HTTP 에러 발생 시 응답 본문과 함께 실패 처리 (디버깅에 유용)
